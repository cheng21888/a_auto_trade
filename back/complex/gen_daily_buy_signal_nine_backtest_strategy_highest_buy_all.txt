timestamp: 20231107204720
trade_count: 130383
total_profit: 4266658.0
size of result_df: 20098
ratio: 0.1541458625741086
average days_held: 4.647062883964934
average profit: 32.72403610900194
Source code for 'gen_signal_func':
def gen_daily_buy_signal_nine(data):
    """
    一触即发选股
    timestamp: 20231107202755
    trade_count: 71487
    total_profit: 2020658.0
    size of result_df: 12372
    ratio: 0.173066431658903
    average days_held: 16.061927343433073
    average profit: 28.26609033810343
    :param data:
    :return:
    """
    data['X_1'] = data['收盘'] / data['收盘'].rolling(window=60).mean() * 100 < 75
    data['X_2'] = data['收盘'] / data['收盘'].rolling(window=40).mean() * 100 < 80
    data['X_3'] = data['最高'] > data['最低'] * 1.052
    data['X_4'] = data['X_3'] & (data['X_3'].rolling(window=5).sum() > 1)
    data['X_5'] = (data['收盘'] == data['最低']) & (data['最高'] == data['最低'])
    data['X_6'] = data['X_4'] & (data['X_2'] | data['X_1']) & ~data['X_5']

    # For X_7, 'EXIST' would mean that the condition was true at least once in the last 10 days.
    # We use rolling.apply with a custom lambda function to check this.
    data['X_7'] = (data['收盘'] >data['开盘']) & \
                  (data['X_6'].rolling(window=10).apply(lambda x: x.any(), raw=True)) & \
                  (data['收盘'].ewm(span=5).mean() > data['收盘'].ewm(span=5).mean().shift(1))

    # The final condition for selection
    data['Buy_Signal'] = data['X_6'] & ~data['X_7'].astype(bool)






